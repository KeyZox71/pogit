#!/usr/bin/env python3
# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    pogit                                              :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: mmoussou <mmoussou@student.42angouleme.fr  +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/02/16 13:58:26 by mmoussou          #+#    #+#              #
#    Updated: 2024/02/16 13:58:26 by mmoussou         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

# ------------ credits ------------

__author__ = "y-syo"
__version__ = "0.0.2"
__license__ = "WTFPL"

# ------------ modules ------------

import sys
import os

# ------------ help messages ------------

class Colors:
    """ ANSI color codes """
    BLACK = "\033[0;30m"
    RED = "\033[0;31m"
    GREEN = "\033[0;32m"
    BROWN = "\033[0;33m"
    BLUE = "\033[0;34m"
    PURPLE = "\033[0;35m"
    CYAN = "\033[0;36m"
    LIGHT_GRAY = "\033[0;37m"
    DARK_GRAY = "\033[1;30m"
    LIGHT_RED = "\033[1;31m"
    LIGHT_GREEN = "\033[1;32m"
    YELLOW = "\033[1;33m"
    LIGHT_BLUE = "\033[1;34m"
    LIGHT_PURPLE = "\033[1;35m"
    LIGHT_CYAN = "\033[1;36m"
    LIGHT_WHITE = "\033[1;37m"
    BOLD = "\033[1m"
    FAINT = "\033[2m"
    ITALIC = "\033[3m"
    UNDERLINE = "\033[4m"
    BLINK = "\033[5m"
    NEGATIVE = "\033[7m"
    CROSSED = "\033[9m"
    END = "\033[0m"

class Help:
    pogit = f'''{Colors.GREEN}pogit{Colors.END}

{Colors.BLUE}USAGE:{Colors.END}
  {Colors.ITALIC}pogit [COMMAND] ...{Colors.END}

{Colors.BLUE}OPTIONS:{Colors.END}
  {Colors.GREEN}-h, --help{Colors.END}        show this help message and exit.
  {Colors.GREEN}-v, --version{Colors.END}     print version.

{Colors.BLUE}COMMANDS:{Colors.END}
  {Colors.GREEN}c/commit{Colors.END}          Commit changes to the git repo.
  {Colors.GREEN}r/remote{Colors.END}          Manage the remotes of the repository.
  {Colors.GREEN}p/push{Colors.END}            Push the current project to all of the remotes.
  {Colors.GREEN}h/help{Colors.END}            Get help on a command.
'''
    push = f'''{Colors.GREEN}pogit remote push{Colors.END}
{Colors.BLUE}USAGE:{Colors.END}
  {Colors.ITALIC}pogit remote push <branch>{Colors.END}
'''
    commit = f'''{Colors.GREEN}pogit commit{Colors.END}

{Colors.BLUE}USAGE:{Colors.END}
  {Colors.ITALIC}pogit commit <type> <(optional)denominator> <message>
  pogit c <type> <(optional)denominator> <message>{Colors.END}

{Colors.BLUE}TYPE:{Colors.END}
  what's this commit about.

    {Colors.GREEN}feature/feat:{Colors.END}  [‚ú®] feat(_): added a very cool feature !
    {Colors.GREEN}clean:{Colors.END}         [üóëÔ∏è] clean(_): cleaned project.
    {Colors.GREEN}init:{Colors.END}          [üéâ] init(_): hello world !
    {Colors.GREEN}norm:{Colors.END}          [‚úèÔ∏è] norm(_): normed project.
    {Colors.GREEN}wip:{Colors.END}           [üèóÔ∏è] wip(_): testing things, might broke.
    {Colors.GREEN}fix:{Colors.END}           [üî®] fix(_): fixed some things.
    {Colors.GREEN}doc:{Colors.END}           [üìù] doc(_): added documentation.

{Colors.BLUE}DENOMINATOR:{Colors.END}
  Which files/subject is this commit about.

{Colors.BLUE}MESSAGE:{Colors.END}
  More precise description of the commit.
  If no message is given, there will be a default message.
'''
    remote = f'''{Colors.GREEN}pogit remote{Colors.END}

{Colors.BLUE}USAGE:{Colors.END}
  {Colors.ITALIC}pogit remote [SUBCOMMAND] ...
  pogit r [SUBCOMMAND] ...{Colors.END}

{Colors.BLUE}SUBCOMMANDS:{Colors.END}
  {Colors.GREEN}add{Colors.END}               Add a remote to the repo.
  {Colors.GREEN}rm/remove{Colors.END}         Remove a remote from the repo.
  {Colors.GREEN}list{Colors.END}              List all active remotes in the repo.
'''
    class Remote:
        r_add = f'''{Colors.GREEN}pogit remote add{Colors.END}

{Colors.BLUE}USAGE:{Colors.END}
  {Colors.ITALIC}pogit remote add <name> <url>{Colors.END}

{Colors.BLUE}NAME:{Colors.END}
  name of the remote.
{Colors.BLUE}URL:{Colors.END}
  url of the remote.
'''
        r_remove = f'''{Colors.GREEN}pogit remote rm{Colors.END}

{Colors.BLUE}USAGE:{Colors.END}
  {Colors.ITALIC}pogit remote rm <name>{Colors.END}

{Colors.BLUE}DESCRIPTION:{Colors.END}
  Remove a remote from the repo.

{Colors.BLUE}NAME:{Colors.END}
  name of the remote to delete.
'''
        r_list = f'''{Colors.GREEN}pogit remote list{Colors.END}

{Colors.BLUE}USAGE:{Colors.END}
  {Colors.ITALIC}pogit remote list{Colors.END}
'''

# ------------ global variables ------------

COMMANDS = ["commit", "remote", "push", "help", "--version", "c", "r", "p", "h", "-v"]

C_TYPES = {"feature": "[‚ú®] feat",
           "feat": "[‚ú®] feat",
           "clean": "[üóëÔ∏è] clean",
           "init": "[üéâ] init",
           "norm": "[‚úèÔ∏è] norm",
           "wip": "[üèóÔ∏è] wip",
           "fix": "[üî®] fix",
           "doc": "[üìù] doc"}

default_commit_msg = {"feature": "added a very cool feature !",
                      "feat": "added a very cool feature !",
                      "clean" : "cleaned project.",
                      "init" : "hello world !",
                      "norm" : "normed project.",
                      "wip" : "testing things, might broke.",
                      "fix" : "fixed some things.",
                      "doc" : "added documentation."}


# ------------ commands functions ------------

def commit():
    if (len(sys.argv) < 3 or len(sys.argv) > 5):
        print(Help.commit)
        exit(0)
    c_type = sys.argv[2]
    c_denom = ""
    c_msg = ""
    c_final = ""
    if (len(sys.argv) == 3):
        c_msg = default_commit_msg[c_type]
    elif (len(sys.argv) == 4):
        c_msg = sys.argv[3]
    else:
        c_denom = sys.argv[3]
        c_msg = sys.argv[4]
    if (c_type not in C_TYPES):
        print("Error: type is not valid.")
        exit(0)
    c_final += C_TYPES[c_type]
    if (c_denom):
        c_final += ("(" + c_denom + ")")
    c_final += (": " + c_msg)
    os.system("git add .") # temporary, will change later for specific files commit, with a -f/--files flag
    os.system('git commit -m "' + c_final + '"')


def remote_add():
    exit(0)


def remote_remove():
    exit(0)


def remote_list():
    #remotes = os.listdir(os.getcwd() + "/.git/refs/remotes")
    #for remote in remotes:
    #    print(remote)
    file = open(os.getcwd() + "/.git/config")
    remotes=[]
    for line in file:
        if "[remote" in line:
            remotes.append(line[9:-3])
    file.close()
    return (remotes)


def print_remote_list():
    remotes = remote_list()
    for remote in remotes:
        print(remote)



def remote():
    if (len(sys.argv) < 3):
        print(Help.remote)
        exit(0)
    command = sys.argv[2]
    match (command):
        case "add":
            remote_add()
        case "rm":
            remote_remove()
        case "remove":
            remote_remove()
        case "list":
            print_remote_list()
        case _:
            print(Help.remote)


def push():
    if (len(sys.argv) > 3):
        print("Error: Bad usage.")
        exit(0)
    if (len(sys.argv) == 3):
        branch = sys.argv[2]
    else:
        branch = "master"
    remotes = remote_list()
    for remote in remotes:
        os.system("git push " + remote + " " + branch)


def man():
    if (len(sys.argv) != 3 or sys.argv[2] not in COMMANDS):
        print(Help.pogit)
        exit(0)
    match (COMMANDS.index(sys.argv[2]) % (len(COMMANDS) / 2)):
        case 0:
            print(Help.commit)
        case 1:
            print(Help.remote)
        case 2:
            print(Help.push)
        case 3:
            print(Help.init)
        case _:
            print(Help.pogit)


# ------------ main function ------------

def main():
    if (".git" not in os.listdir(os.getcwd())):
        print("Unsupported location, are you sure you're at the root of your repository ?")
        exit(0)
    if (len(sys.argv) < 2 or sys.argv[1] == '-h' or sys.argv[1] == '--help' or sys.argv[1] not in COMMANDS):
        print(Help.pogit)
        sys.exit(0)
    arg = sys.argv[1]
    if (arg == '-v' or arg == '--version'):
        print("pogit version: " + __version__)
        sys.exit(0)
    match (COMMANDS.index(arg) % (len(COMMANDS) / 2)):
        case 0:
            commit()
        case 1:
            remote()
        case 2:
            push()
        case 3:
            man()
        case _:
            print(Help.pogit)


if __name__ == '__main__':
    main()
